// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

//**** SoundScape ****
Table user_account {
  id integer [primary key]
  email varchar [unique, not null]
  password varchar [not null] 
  password_token varchar 
  
}

Table user_details {  
  user_id integer [primary key] 
  first_name varchar [not null]
  last_name varchar [not null] 
  age integer [not null, note: 'CHECK (age >= 13 AND age <= 120)']
  phone_no varchar [unique]
  created_at timestamp
  updated_at timestamp
}

Table role {
  id integer [primary key]
  name enum [not null, note: 'ADMIN, MANAGER, STAFF, VOLUNTEER, REGULAR'] 
}

Table user_role {
  id integer [primary key]   

  user_id integer [not null]
  role_id integer [not null]  
  since_date timestamp [not null]
}

Table festival_edition { //retinem date ce difere anul pt festival
  id integer [primary key]   
  festival_id integer [not null] 
  year_happened integer [not null] 
  venue_name varchar [not null]
  description varchar [not null]
  status enum [not null, note: 'published, ongoing, ended, cancelled']
  start_date date [not null]
  end_date date [not null]
  people_capacity integer [not null, note: 'CHECK (people_capacity > 0)']
  terms_conditions text [not null]
  updated_at timestamp [not null]

  indexes {
    (festival_id, year_happened) [unique] // Ensures unique edition per date for each festival
  }
}

Table festival {
  id integer [primary key]
  name varchar [not null]
  country varchar [not null] 
  city varchar [not null] 
  street_name varchar [not null]
  street_nr integer [not null]
  festival_contact varchar [not null]
  website varchar 
  logo_url varchar [not null] 
  updated_at timestamp [not null]
}

Table edition_review {
  id integer [primary key]
  edition_id integer [not null]
  user_id integer [not null]
  rating_stars integer [not null, note: 'CHECK (rating_stars >= 1 AND rating_stars <= 5)'] 
  comment text [not null]
  posted_at timestamp [not null] //update with now date

  indexes {
    (edition_id, user_id) [unique] //one reviews per user for that specific edition
  }
}

Table amenity {
  id integer [primary key]
  name varchar [not null]
  description text
  people_capacity integer [not null] 
  price decimal(10, 2) [not null]
}

Table edition_amenity {
  id integer [primary key]

  edition_id integer [not null]
  amenity_id integer [not null] 
  start_at timestamp //can take place hours or days
  end_at timestamp
}

Table artist {
  id integer [primary key]
  real_name varchar [unique, not null] 
  stage_name varchar [unique, not null]
  music_genre varchar [not null]
  instagram_account varchar [not null] 
  image_url varchar [not null]
  manager_email varchar
}

Table edition_artist {
  id integer [primary key]

  edition_id integer [not null]
  artist_id integer [not null]
  is_headliner boolean [default: false]
  performance_date date [not null]
  start_time time [not null]
  end_time time [not null]
}

Table ticket_type {
  id integer [primary key]
  edition_id integer [not null]
  name enum [not null, note: 'VIP, Regular, EarlyBird, Parent, Elderly, Couple']
  benefits text
  price decimal(10, 2) [not null]
}

Table purchase {
  id integer [primary key]
  user_id integer [not null]  
  edition_id integer [not null]
  status enum [not null, note: 'pending, confirmed, cancelled']
  total_amount decimal(10, 2) [not null] //ticket + sum(amenities)
  purchase_date timestamp [not null]
} 

Table purchased_ticket { //to can have in one purchase different types of tickets
  id integer [primary key]
  purchase_id integer [not null]
  ticket_type_id integer [not null] //to can go to find the price/ticket_type
  quantity integer [not null, default: 1]
  tickets_used integer [not null, default: 0] // track how many have been used
  valid_from date [not null]  // When tickets become valid
  expires_at date [not null]
  
  //ensure tickets_used never exceeds quantity
  Note: 'CHECK (tickets_used <= quantity)'
  
  indexes {
    (purchase_id, ticket_type_id) [unique] // one entry per ticket type per purchase(use quantity)
  }
}

Table ticket_usage {
  id integer [primary key]
  purchased_ticket_id integer [not null]
  used_at timestamp [not null]
  entry_gate varchar  [not null]// where was used
  staff_member_id integer [not null] // which staff member scanned it
  notes text // any mentions
  
}

Table purchase_amenity { 
  id integer [primary key]
  purchase_id integer [not null]
  amenity_id integer [not null]
  edition_amenity_id integer [not null]
  quantity integer [not null, default: 1]
  
}


// Relationships
Ref: user_account.id - user_details.user_id [delete: cascade]
Ref: user_account.id < purchase.user_id
Ref: user_account.id < user_role.user_id [delete: cascade]
Ref: role.id < user_role.role_id [delete: cascade]
Ref: user_account.id < edition_review.user_id [delete: cascade]
Ref: user_account.id < ticket_usage.staff_member_id // staff who scanned

Ref: festival.id < festival_edition.festival_id 

Ref: amenity.id < purchase_amenity.amenity_id
Ref: amenity.id < edition_amenity.amenity_id [delete: cascade]

Ref: festival_edition.id < edition_amenity.edition_id [delete: cascade]
Ref: festival_edition.id < ticket_type.edition_id
Ref: festival_edition.id < purchase.edition_id 
Ref: festival_edition.id < edition_review.edition_id [delete: cascade]
Ref: festival_edition.id < edition_artist.edition_id [delete: cascade]

Ref: artist.id < edition_artist.artist_id [delete: cascade]

Ref: purchase.id < purchased_ticket.purchase_id [delete: cascade]
Ref: purchase.id < purchase_amenity.purchase_id [delete: cascade]

Ref: ticket_type.id < purchased_ticket.ticket_type_id

Ref: purchased_ticket.id < ticket_usage.purchased_ticket_id [delete: cascade]

Ref: edition_amenity.id < purchase_amenity.edition_amenity_id [delete: cascade]